#!/usr/bin/env python
# encoding: UTF-8
# find a contig that maps on 2 chromosome
# this means that there is a translocation or something else cool
# SÃ©bastien Boisvert

"""
inputs:

 a psl file generated by aligning an assembly on a base reference

usually:

reads: from collaborator or sponsor
aligner: blat
assembler: Ray
reference: from reference supplier



psLayout version 3

match   mis-    rep.    N's     Q gap   Q gap   T gap   T gap   strand  Q               Q       Q       Q       T               T       T       T       block   blockSizes      qStarts  tStarts
        match   match           count   bases   count   bases           name            size    start   end     name            size    start   end     count
---------------------------------------------------------------------------------------------------------------------------------------------------------------
20767   0       0       0       0       0       0       0       +       contig-0        20767   0       20767   GeneDB|LmjF.16  714651  41078   61845   1       20767,  0,      41078,

"""

import sys

arguments=sys.argv



if len(arguments)==1:
	print __doc__
	sys.exit(1)


i=0

debug=False

pslFile=sys.argv[1]

slices={}

queryEntries={}

precision=100

chromosome1="GeneDB|LmjF.34"

print "Welcome to the TranslocationFinder tool from RayTrek Technologies..."
print ""
print "[Configuration]"
print " DesiredTarget: "+chromosome1
print " Precision: "+str(precision)
print " Alignments: "+pslFile
print ""
print "Commencing ............................. ;)"
print ""
queriesOnTarget={}

queryTargets={}

# fetch the queries with hits on desired target
for line in open(pslFile):
	i+=1

	if i<=5:
		continue

	if line.strip()=="":
		continue
	tokens=line.split("\t")

	if len(tokens)<10:
		continue

	matches=int(tokens[0])

	strand=tokens[8].strip()

	queryName=tokens[9].strip()
	querySize=int(tokens[10])

	targetName=tokens[13]
	targetSize=int(tokens[14])

	queryEntries[queryName]=querySize

	ratio=(0.0+matches)/querySize

	key=int(ratio*precision)

	if targetName==chromosome1:
		queriesOnTarget[queryName]=None


	if key not in slices:
		slices[key]={}

	slices[key][queryName]=None

	if queryName not in queryTargets:
		queryTargets[queryName]={}

	if targetName not in queryTargets[queryName] or matches > queryTargets[queryName][targetName]:
		queryTargets[queryName][targetName]=matches

	#print str(matches)+" "+queryName+" "+str(querySize)+" "+targetName+" "+str(targetSize)+" "+str(ratio)

print "Queries: "+str(len(queryEntries))
print " with perfect matches: "+str(len(slices[precision]))

print " Report:"
print ""

iterator=precision

minimumBound=precision/4

while iterator>=minimumBound:
	if iterator in slices:
		print "  SLICE "+str(iterator)+"/"+str(precision)+" -------> "+str(len(slices[iterator]))

	iterator-=1

print " Finished calibration"
print " Tooling bits online, readying software components, please wait..."

print ""
seconds=10
while seconds>=0:
	print "Combinatorial analysis will start in "+str(seconds)+" seconds... PRESS <ESC>] to abort"
	seconds-=1

print ""

print "Virtual fishing "
print ""

print " Queries with alignments on target "+chromosome1
print str(len(queriesOnTarget))

print " Queries with alignments on target "+chromosome1+" and on other target too"
print ""


# check queries that are promising

list=queryEntries.keys()
interestingEntries=0

minimumScore=int(0.2*precision)
for queryName in list:
	queryLength=queryEntries[queryName]

	if queryName in queriesOnTarget:
		goodHits=0

		for targetName in queryTargets[queryName].keys():
			matches=queryTargets[queryName][targetName]

			score=matches*precision/queryLength

			if score >= minimumScore:
				goodHits+=1

		if goodHits==1:
			continue

		interestingEntries+=1
		print "<DarkCastorEntry>"
		print "<identifier>"+str(interestingEntries)+"</identifier>"
		print " SPARK QueryName= "+queryName+" With Length: "+str(queryLength)+"  ----------> GoodHits: "+str(goodHits)

		for targetName in queryTargets[queryName].keys():
			matches=queryTargets[queryName][targetName]

			score=matches*precision/queryLength

			if score < minimumScore:
				continue

			print " ********* TargetName: "+targetName+" Matches: "+str(matches)+" Ratio: "+str(score)

		print "</DarkCastorEntry>"
		print ""

print "Final report follows"

print ""
print ""
print "Interesting entries: "+str(interestingEntries)
